"use strict";(self.webpackChunkcourses=self.webpackChunkcourses||[]).push([[8748],{4137:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=c(n),d=a,f=m["".concat(p,".").concat(d)]||m[d]||l[d]||s;return n?r.createElement(f,o(o({ref:t},u),{},{components:n})):r.createElement(f,o({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var c=2;c<s;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},998:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>l,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var r=n(7462),a=(n(7294),n(4137));const s={sidebar_position:4},o="Docker Measurements [HOST]",i={unversionedId:"Chapter 4 - Epsagon/docker measurements",id:"Chapter 4 - Epsagon/docker measurements",title:"Docker Measurements [HOST]",description:"This script is not supposed to be run in a container!",source:"@site/docs-cloud-for-ai/Chapter 4 - Epsagon/4. docker measurements.md",sourceDirName:"Chapter 4 - Epsagon",slug:"/Chapter 4 - Epsagon/docker measurements",permalink:"/vives/docs-cloud-for-ai/Chapter 4 - Epsagon/docker measurements",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Container Measurements [VM]",permalink:"/vives/docs-cloud-for-ai/Chapter 4 - Epsagon/container measurements"},next:{title:"Python To Executable",permalink:"/vives/docs-cloud-for-ai/Chapter 4 - Epsagon/python to executable"}},p={},c=[{value:"Exercise",id:"exercise",level:3},{value:"Requirements.txt",id:"requirementstxt",level:3}],u={toc:c};function l(e){let{components:t,...s}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,s,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"docker-measurements-host"},"Docker Measurements ","[HOST]"),(0,a.kt)("admonition",{type:"danger"},(0,a.kt)("p",{parentName:"admonition"},"This script is not supposed to be run in a container! ",(0,a.kt)("br",null),"\nInstead, it runs on the host-machine in order to gather stats of all the containers in Docker Engine")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="main_sdk.py"',title:'"main_sdk.py"'},"# -*- coding: utf-8 -*-\nimport docker\nfrom docker.client import DockerClient\nimport epsagon\nimport time\n\nimport pprint\n\nepsagon.init(\n    token='a5baadfc-6959-488a-bfa8-3adbd267df10',\n    app_name='MyFirstDashboards',\n    metadata_only=False,\n)\n\nclass obj(object):\n    def __init__(self, d):\n        for k, v in d.items():\n            if isinstance(k, (list, tuple)):\n                setattr(self, k, [obj(x) if isinstance(x, dict) else x for x in v])\n            else:\n                setattr(self, k, obj(v) if isinstance(v, dict) else v)\n\ndef measure_VM_cpu(stats):\n    try:\n        metrics = obj(stats)\n        cpuDelta = metrics.cpu_stats.cpu_usage.total_usage - metrics.precpu_stats.cpu_usage.total_usage\n        systemDelta = metrics.cpu_stats.system_cpu_usage - metrics.precpu_stats.system_cpu_usage\n        return cpuDelta / systemDelta * len(metrics.cpu_stats.cpu_usage.percpu_usage) * 10\n    except Exception as e:\n        print(e)\n\ndef measure_VM_mem(stats):\n    # measure memory usage from container\n    pass\n\ndef measure_VM_disk(stats):\n    # measure disk usage from container\n    pass\n\ndef measure_VM_network(stats):\n    # measure network usage from container\n    pass\n\ndef measure_VM_volumes(client: DockerClient):\n    # measure volumes from Docker Engine\n    pass\n\ndef measure_HOST_GPUs():\n    # measure HOST Graphic Processing Units\n    pass\n\ndef measure_HOST_CPUs():\n    # measure cpu usage from host computer\n    pass\n\ndef measure_HOST_MEM():\n    # measure memory usage from host computer\n    pass\n\n@epsagon.python_wrapper\ndef analyze_containers(client: DockerClient):\n    pp = pprint.PrettyPrinter(indent=4)\n\n    while True:\n        containers = client.containers.list(all=True)\n        for ctn in containers:\n            stats = ctn.stats(decode=False, stream=False)\n            # pp.pprint(stats)\n            cpu_usage = 0\n            if ctn.status == \"running\":\n                cpu_usage = measure_VM_cpu(stats)\n\n            container = f\"{ctn.name} - {ctn.id}\"\n            epsagon.label(container, cpu_usage)\n            print(f\"{container} [{ctn.status}]: {cpu_usage} %\")\n\n        print('Epsagon trace URL:', epsagon.get_trace_url())\n        time.sleep(5)\n\nif __name__ == '__main__':\n    client = docker.DockerClient(base_url=\"tcp://localhost:2375\")\n    analyze_containers(client=client)\n")),(0,a.kt)("p",null,"We use ",(0,a.kt)("inlineCode",{parentName:"p"},'docker.DockerClient(base_url="tcp://localhost:2375")')," to illustrate the access of a Docker Engine by tcp-protocol. ",(0,a.kt)("br",null),"\nThe use of ",(0,a.kt)("inlineCode",{parentName:"p"},"fromenv()")," can also be used.\nBut in this case, using the tcp protocol requires the daemon to be exposed."),(0,a.kt)("p",null,"Go to ",(0,a.kt)("em",{parentName:"p"},"Settings")," > ",(0,a.kt)("em",{parentName:"p"},"General"),":"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Docker Dameon",src:n(1413).Z,width:"3010",height:"1392"})),(0,a.kt)("h3",{id:"exercise"},"Exercise"),(0,a.kt)("p",null,"Complete the following functions: ",(0,a.kt)("br",null)),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"measure_VM_mem")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"measure_VM_disk")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"measure_VM_network")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"measure_VM_volumes")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"measure_HOST_GPUs")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"measure_HOST_CPUs")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"measure_HOST_MEM"))),(0,a.kt)("p",null,"After doing so, create new ",(0,a.kt)("strong",{parentName:"p"},"panels")," in a ",(0,a.kt)("strong",{parentName:"p"},"custom")," dashboard. ",(0,a.kt)("br",null)),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Upload your script and a screenshot of your Epsagon dashboard on ",(0,a.kt)("strong",{parentName:"p"},"Toledo"),".")),(0,a.kt)("h3",{id:"requirementstxt"},"Requirements.txt"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="requirements.txt"',title:'"requirements.txt"'},"pip==22.2.2\nfuture==0.18.2\nMarkupSafe==2.1.1\nWerkzeug==2.2.2\nJinja2==3.1.2\nclick==8.1.3\nitsdangerous==2.1.2\nepsagon==1.81.0\nrequests==2.28.1\nFlask==2.2.2\npsutil==5.9.2\npywin32==304\nwrapt==1.14.1\nurllib3==1.26.12\nsix==1.16.0\ntzlocal==4.2\npython-dateutil==2.8.2\nsetuptools==63.2.0\ndocker==6.0.0\nGPUtil==1.4.0\n")))}l.isMDXComponent=!0},1413:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/tcp_daemon-07491056a77da8296ecad42080f197fe.png"}}]);