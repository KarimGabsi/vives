"use strict";(self.webpackChunkcourses=self.webpackChunkcourses||[]).push([[382],{4137:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),d=r,h=u["".concat(l,".").concat(d)]||u[d]||m[d]||a;return n?o.createElement(h,i(i({ref:t},p),{},{components:n})):o.createElement(h,i({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3353:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var o=n(7462),r=(n(7294),n(4137));const a={sidebar_position:2},i="Docker Compose",s={unversionedId:"Chapter 2 - Docker Hub & Compose/docker compose",id:"Chapter 2 - Docker Hub & Compose/docker compose",title:"Docker Compose",description:"Compose is a tool for defining and running multi-container Docker applications.",source:"@site/docs-cloud-for-ai/Chapter 2 - Docker Hub & Compose/2. docker compose.md",sourceDirName:"Chapter 2 - Docker Hub & Compose",slug:"/Chapter 2 - Docker Hub & Compose/docker compose",permalink:"/vives/docs-cloud-for-ai/Chapter 2 - Docker Hub & Compose/docker compose",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Docker Hub",permalink:"/vives/docs-cloud-for-ai/Chapter 2 - Docker Hub & Compose/docker hub"},next:{title:"Docker Swarm",permalink:"/vives/docs-cloud-for-ai/Chapter 3 - Docker Swarm & API/docker swarm"}},l={},c=[{value:"Multiple containers - Volume",id:"multiple-containers---volume",level:2},{value:"Docker Compose with PyCharm",id:"docker-compose-with-pycharm",level:2},{value:"Docker Compose with CLI",id:"docker-compose-with-cli",level:2},{value:"Results",id:"results",level:2}],p={toc:c};function m(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,o.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"docker-compose"},"Docker Compose"),(0,r.kt)("p",null,"Compose is a tool for defining and running multi-container Docker applications.\nWith Compose, you use a YAML file to configure your application\u2019s services.\nThen, with a single command, you create and start all the services from your configuration."),(0,r.kt)("h2",{id:"multiple-containers---volume"},"Multiple containers - Volume"),(0,r.kt)("p",null,"Let's create a simple flask website that uses some IO functions. ",(0,r.kt)("br",null),"\nThe purpose of this is the use of ",(0,r.kt)("strong",{parentName:"p"},"volumes"),", in this case we'll have two containers running where the data is stored in the same volume."),(0,r.kt)("admonition",{type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"Commit this code to the docker hub repository so that we have an online image based upon this script!")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py",metastring:"title=mainVolume.py showLineNumbers",title:"mainVolume.py",showLineNumbers:!0},'import os\nfrom pathlib import Path\nfrom flask import Flask\n\nfolder = "Data/logs/"\nhits_path = folder + "hits.txt"\nif not os.path.exists(folder):\n    os.makedirs(folder)\n    print("directories made")\nPath(hits_path).touch(exist_ok=True)\nprint("file present: check.")\n\napp = Flask(__name__)\n\ndef get_count():\n    with open(hits_path, "r+") as file:\n        val = file.readline()\n        if val == \'\':\n            return 0\n        else:\n            return int(val)\n\ndef new_user():\n    try:\n        hits = int(get_count())\n        hits += 1\n        with open(hits_path, "w") as file:\n            file.write(str(hits))\n        return hits\n    except Exception as e:\n        print(e)\n\n\n@app.route(\'/\')\ndef hello():\n    users = new_user()\n    return \'Hello World! I have been requested {} times.\\n\'.format(users)\n\nif __name__ == "__main__":\n    app.run(host="0.0.0.0", port=int(5000), debug=True)\n')),(0,r.kt)("p",null,"Let's build two docker containers:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"one based upon the online image"),(0,r.kt)("li",{parentName:"ul"},"one that we will build when running the docker compose (see down below)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text",metastring:"title=DockerfileVolume",title:"DockerfileVolume"},"# Dockerfile Reference = https://docs.docker.com/engine/reference/builder/\n\n# With the FROM keyword we can tell docker which image we are going to use.\n# For a list of images: https://hub.docker.com/search?q=&type=image\nFROM python:alpine\n\n# Copy our app\nCOPY . /app\n\n# Set our app as the working directory\nWORKDIR /app\n\n# Install the requirements of our app\n# Remember to generate this in our project: pip freeze > requirements.txt\nRUN pip install -r requirements.txt\n\n# We are using flask, so we need a port open\n# Make sure you expose the same port as in your python flask script.\nEXPOSE 5000\n\n# Attach volume to the image\n#VOLUME TestVolume\n\n# Then run our app\nCMD python ./mainVolume.py\n")),(0,r.kt)("h2",{id:"docker-compose-with-pycharm"},"Docker Compose with PyCharm"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create a volume via Docker Desktop and/or command line named: ",(0,r.kt)("strong",{parentName:"li"},"TestVolume")),(0,r.kt)("li",{parentName:"ul"},"Create an empty file called ",(0,r.kt)("strong",{parentName:"li"},"docker-compose.yml"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="docker-compose.yml"',title:'"docker-compose.yml"'},'version: "3.9"\nservices:\n  onlinebuild:\n    container_name: onlinewithvolume\n    image: revelare/autobuildtest:latest\n    pull_policy: always\n    ports:\n      - 5000:5000\n    volumes:\n      - TestVolume:/app\n  localbuild:\n    container_name: localwithvolume\n    build:\n      dockerfile: DockerfileVolume\n    image: localautobuild:latest\n    ports:\n      - 5001:5000\n    volumes:\n      - TestVolume:/app\nvolumes:\n  TestVolume:\n    external: false\n    name: TestVolume\n')),(0,r.kt)("p",null,"With PyCharm it is relativaly easy to execute a docker-compose file. ",(0,r.kt)("br",null),"\nAll you need is to connect PyCharm with the docker daemon.\nYou will need to add this in the settings."),(0,r.kt)("admonition",{type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"Make sure you have PyCharm Professional for this!")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"PyCharm Docker",src:n(8361).Z,title:"PyCharm Docker",width:"2173",height:"1611"})),(0,r.kt)("p",null,"Now you can simply execute the docker-compose by clicking on ",(0,r.kt)("strong",{parentName:"p"},"services")," in the docker-compose file."),(0,r.kt)("h2",{id:"docker-compose-with-cli"},"Docker Compose with CLI"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker compose -f docker-compose.yml\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Extra commands info"',title:'"Extra',commands:!0,'info"':!0},"Define and run multi-container applications with Docker.\n\nUsage:\n  docker compose [-f <arg>...] [--profile <name>...] [options] [COMMAND] [ARGS...]\n  docker compose -h|--help\n\nOptions:\n  -f, --file FILE             Specify an alternate compose file\n                              (default: docker-compose.yml)\n  -p, --project-name NAME     Specify an alternate project name\n                              (default: directory name)\n  --profile NAME              Specify a profile to enable\n  --verbose                   Show more output\n  --log-level LEVEL           DEPRECATED and not working from 2.0 - Set log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)\n  --no-ansi                   Do not print ANSI control characters\n  -v, --version               Print version and exit\n  -H, --host HOST             Daemon socket to connect to\n\n  --tls                       Use TLS; implied by --tlsverify\n  --tlscacert CA_PATH         Trust certs signed only by this CA\n  --tlscert CLIENT_CERT_PATH  Path to TLS certificate file\n  --tlskey TLS_KEY_PATH       Path to TLS key file\n  --tlsverify                 Use TLS and verify the remote\n  --skip-hostname-check       Don't check the daemon's hostname against the\n                              name specified in the client certificate\n  --project-directory PATH    Specify an alternate working directory\n                              (default: the path of the Compose file)\n  --compatibility             If set, Compose will attempt to convert deploy\n                              keys in v3 files to their non-Swarm equivalent\n\nCommands:\n  build              Build or rebuild services\n  bundle             Generate a Docker bundle from the Compose file\n  config             Validate and view the Compose file\n  create             Create services\n  down               Stop and remove containers, networks, images, and volumes\n  events             Receive real time events from containers\n  exec               Execute a command in a running container\n  help               Get help on a command\n  images             List images\n  kill               Kill containers\n  logs               View output from containers\n  pause              Pause services\n  port               Print the public port for a port binding\n  ps                 List containers\n  pull               Pull service images\n  push               Push service images\n  restart            Restart services\n  rm                 Remove stopped containers\n  run                Run a one-off command\n  scale              Set number of containers for a service\n  start              Start services\n  stop               Stop services\n  top                Display the running processes\n  unpause            Unpause services\n  up                 Create and start containers\n  version            Show the Docker Compose version information\n")),(0,r.kt)("h2",{id:"results"},"Results"),(0,r.kt)("p",null,"We should see two containers now running from our docker compose:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Docker Compose Result",src:n(1618).Z,title:"Docker Compose Result 1",width:"3174",height:"569"})),(0,r.kt)("p",null,"Our ",(0,r.kt)("strong",{parentName:"p"},"TestVolume")," is in use by our two containers!"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Docker Compose Result",src:n(2438).Z,title:"Docker Compose Result 2",width:"3129",height:"310"})),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Docker Compose Result",src:n(6973).Z,title:"Docker Compose Result 3",width:"3242",height:"697"})),(0,r.kt)("p",null,"They both share the same data!\nSo our the file we are using for our view count is being ",(0,r.kt)("strong",{parentName:"p"},"persistently used by two containers!")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Docker Compose Result",src:n(3752).Z,title:"Docker Compose Result 4",width:"3213",height:"1428"})))}m.isMDXComponent=!0},1618:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/docker_compose_result_1-c9a0be2ff9327208126322332d8eb613.png"},2438:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/docker_compose_result_2-a8624419bae314c0c3686d93c81ad54b.png"},6973:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/docker_compose_result_3-0f630ae220a1f26e5706ce5a3cd1765a.png"},3752:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/docker_compose_result_4-f8ee43fade08b458c1319fb836faea48.png"},8361:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/pycharm_docker-d0577e147fdd6e834bcdc6054a9d7407.png"}}]);