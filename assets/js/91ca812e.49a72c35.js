"use strict";(self.webpackChunkcourses=self.webpackChunkcourses||[]).push([[3504],{4137:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(n),m=a,k=u["".concat(p,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(k,i(i({ref:t},c),{},{components:n})):r.createElement(k,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5814:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(7462),a=(n(7294),n(4137));const o={sidebar_position:2},i="Summary Exercise: Guide",l={unversionedId:"Chapter 5 - Summary Excercise/guide",id:"Chapter 5 - Summary Excercise/guide",title:"Summary Exercise: Guide",description:"Step 1: Localizing",source:"@site/docs-cloud-for-ai/Chapter 5 - Summary Excercise/2. guide.md",sourceDirName:"Chapter 5 - Summary Excercise",slug:"/Chapter 5 - Summary Excercise/guide",permalink:"/vives/docs-cloud-for-ai/Chapter 5 - Summary Excercise/guide",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Summary Exercise: XOR",permalink:"/vives/docs-cloud-for-ai/Chapter 5 - Summary Excercise/xor"},next:{title:"Official Tutorial + Exercise",permalink:"/vives/docs-cloud-for-ai/Chapter 6 - Scrapy/official tutorial"}},p={},s=[{value:"Step 1: Localizing",id:"step-1-localizing",level:2},{value:"Creating the front and back-end.",id:"creating-the-front-and-back-end",level:3},{value:"xor_training.py",id:"xor_trainingpy",level:4},{value:"xor_predict.py",id:"xor_predictpy",level:4},{value:"GUI for xor_predict and xor_training",id:"gui-for-xor_predict-and-xor_training",level:3},{value:"Flask Example",id:"flask-example",level:4},{value:"Javascript Example",id:"javascript-example",level:4},{value:"HTML Example",id:"html-example",level:4},{value:"Step 2: Epsagon",id:"step-2-epsagon",level:2},{value:"Step 3: Dockerizing",id:"step-3-dockerizing",level:2},{value:"Docker File",id:"docker-file",level:3},{value:"Docker Compose",id:"docker-compose",level:3},{value:"Step 4: Final touches",id:"step-4-final-touches",level:2}],c={toc:s};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"summary-exercise-guide"},"Summary Exercise: Guide"),(0,a.kt)("h2",{id:"step-1-localizing"},"Step 1: Localizing"),(0,a.kt)("h3",{id:"creating-the-front-and-back-end"},"Creating the front and back-end."),(0,a.kt)("p",null,"1) create xor_predict.py (this is container 1) ",(0,a.kt)("br",null),"\n2) create xor_training.py (This is container 2)"),(0,a.kt)("h4",{id:"xor_trainingpy"},"xor_training.py"),(0,a.kt)("p",null,"Here you create an ANN that trains input data with a dimension of 2. ",(0,a.kt)("br",null),"\nThere are three important functions here:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def train(model, epochs: int):\n    # trains the given model an x amount of times (epochs) and retuns it\n\ndef predict(model, input: np.array):\n    # retuns a prediction based on the input\n\ndef save(name: str):\n    # saves the model -> you can use pickle/json or simply keras (model.save())\n")),(0,a.kt)("h4",{id:"xor_predictpy"},"xor_predict.py"),(0,a.kt)("p",null,"Important function here, for each time a prediction request is made, we need to load the existing model"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def load(path):\n    return keras.models.load_model(path)\n")),(0,a.kt)("h3",{id:"gui-for-xor_predict-and-xor_training"},"GUI for xor_predict and xor_training"),(0,a.kt)("p",null,"As per request here's a little example that I quickly mocked up in order to combine ",(0,a.kt)("inlineCode",{parentName:"p"},"JAVASCRIPT")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Python"),". ",(0,a.kt)("br",null),"\nThe folder structure looks like this at the moment: ",(0,a.kt)("br",null)),(0,a.kt)("p",null,"-XOR_exercise(project)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"GUI",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"static",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"model.js"))),(0,a.kt)("li",{parentName:"ul"},"index.html"))),(0,a.kt)("li",{parentName:"ul"},"xor_predict.py"),(0,a.kt)("li",{parentName:"ul"},"xor_training.py")),(0,a.kt)("h4",{id:"flask-example"},"Flask Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="xor_training.py"',title:'"xor_training.py"'},"# -*- coding: utf-8 -*-\nimport json\nfrom flask import Flask, render_template, send_from_directory, request, jsonify, make_response\nfrom functools import wraps, update_wrapper\nfrom datetime import datetime\n\n\ndef nocache(view):\n    @wraps(view)\n    def no_cache(*args, **kwargs):\n        response = make_response(view(*args, **kwargs))\n        response.headers['Last-Modified'] = datetime.now()\n        response.headers['Cache-Control'] = 'no-store, no-cache, must-revalidate, post-check=0, pre-check=0, max-age=0'\n        response.headers['Pragma'] = 'no-cache'\n        response.headers['Expires'] = '-1'\n        return response\n\n    return update_wrapper(no_cache, view)\n\n\nclass GUI():\n    def __init__(self, host, port):\n        self.app = Flask(__name__, template_folder='GUI', static_url_path='/')\n        self.app.secret_key = 'CLOUD FOR AI'\n        self.app.config['TEMPLATES_AUTO_RELOAD'] = True\n        self.host = host\n        self.port = port\n\n        @self.app.route('/', methods=['GET', 'POST'])\n        @nocache\n        def home():\n            return render_template('index.html')\n\n\n        @self.app.route('/predict', methods=[\"POST\"])\n        @nocache\n        def predict():\n            try:\n            \n                # ---\x3e LOAD MODEL / CALL PREDICT HERE <---\n                \n                json_data = json.dumps(request.json)\n                json_data = json.loads(json_data)\n                print(json_data)\n                print(json_data['val1'])\n\n                result = int(json_data['val1']) ^ int(json_data['val2'])\n                response = {\"val1\": json_data['val1'], \"val2\": json_data['val2'], \"result\": result}\n                print(result, response)\n                return jsonify(response)\n            except Exception as ex:\n                return jsonify({\"exception\": ex.__str__()})\n\n        @self.app.route('/static/<path:filename>')\n        @nocache\n        def sendfile(filename):\n            print(\"hello, \", filename)\n            return send_from_directory('GUI/static/', filename)\n\n        self.app.run(self.host, self.port, True)\n\n\nif __name__ == '__main__':\n    myGUI = GUI(host=\"0.0.0.0\", port=5000)\n")),(0,a.kt)("h4",{id:"javascript-example"},"Javascript Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="model.js"',title:'"model.js"'},"const setup = () => {\n    let predict_button = document.getElementById(\"predict_button\");\n    predict_button.addEventListener(\"click\", predict);\n};\n\nsetup();\n\nfunction predict()\n{\n  //read values here (let x = ...)\n  postData(url=\"/predict\", data={val1: 1, val2: 0})\n  .then((data) => {\n    console.log(data); // JSON data parsed by `data.json()` call\n    document.getElementById(\"response\").textContent = \"val1: \" + data[\"val1\"] + \" val2: \" + data[\"val2\"] + \" result: \" + data[\"result\"];\n  });\n}\n// Example POST method implementation:\nasync function postData(url = '', data = {}) {\n  // Default options are marked with *\n  const response = await fetch(url, {\n    method: 'POST', // *GET, POST, PUT, DELETE, etc.\n    mode: 'cors', // no-cors, *cors, same-origin\n    cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n    credentials: 'same-origin', // include, *same-origin, omit\n    headers: {\n      'Content-Type': 'application/json'\n      // 'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    redirect: 'follow', // manual, *follow, error\n    referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n    body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n  });\n  return response.json(); // parses JSON response into native JavaScript objects\n}\n")),(0,a.kt)("h4",{id:"html-example"},"HTML Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="index.html"',title:'"index.html"'},'<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <title>CLOUD FOR AI</title>\n</head>\n    <body>\n        <button id="predict_button">Predict</button>\n        <div id="response"></div>\n        <script src="static/model.js"><\/script>\n    </body>\n</html>\n')),(0,a.kt)("h2",{id:"step-2-epsagon"},"Step 2: Epsagon"),(0,a.kt)("p",null,"Intergrate Epsagon into your code and send out useful keypair values. ",(0,a.kt)("br",null),"\nBased on those values, project them in your custom dashboards. ",(0,a.kt)("br",null)),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Check out Chapter 4")),(0,a.kt)("h2",{id:"step-3-dockerizing"},"Step 3: Dockerizing"),(0,a.kt)("h3",{id:"docker-file"},"Docker File"),(0,a.kt)("p",null,"After you finished the application ",(0,a.kt)("strong",{parentName:"p"},"locally"),", you dockerize your project."),(0,a.kt)("p",null,"For each container we make a dockerfile:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text",metastring:"title=docker_predict",title:"docker_predict"},"FROM python:3.10\nCOPY . /app\nWORKDIR /app\nRUN pip install --upgrade pip\nRUN pip install --no-cache-dir -r requirements.txt\n\nEXPOSE 5000\n\nCMD python ./xor_predict.py\n")),(0,a.kt)("p",null,"for ",(0,a.kt)("inlineCode",{parentName:"p"},"docker_training")," it's exactly the same except for the last CMD command."),(0,a.kt)("h3",{id:"docker-compose"},"Docker Compose"),(0,a.kt)("p",null,"1) Local:\nIt is best to first make your dockor compose based on a ",(0,a.kt)("strong",{parentName:"p"},"build")," rather than a online image."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="example"',title:'"example"'},"    container_name: xor_predict\n    image: docker_predict:latest\n    build:\n      dockerfile: docker_predict\n    pull_policy: build\n")),(0,a.kt)("p",null,"Make sure you have pull_policy to build, so that your project builds entirely on every try."),(0,a.kt)("p",null,"2) Docker Hub"),(0,a.kt)("p",null,"Once up and running locally you can edit your docker hub repository so that it generates an images file automatically. ",(0,a.kt)("br",null),"\nThen you can edit your compose file!"),(0,a.kt)("h2",{id:"step-4-final-touches"},"Step 4: Final touches"),(0,a.kt)("p",null,"This is the structure of your project by now: ",(0,a.kt)("br",null)),(0,a.kt)("p",null,"XOR_exercise(project):"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"GUI (front end)",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"static",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"model.js"))),(0,a.kt)("li",{parentName:"ul"},"index.html"))),(0,a.kt)("li",{parentName:"ul"},"xor_predict.py (container 1)"),(0,a.kt)("li",{parentName:"ul"},"xor_training.py (container 2)"),(0,a.kt)("li",{parentName:"ul"},"docker_compose.yml (docker compose)"),(0,a.kt)("li",{parentName:"ul"},"requirements.txt (packages)"),(0,a.kt)("li",{parentName:"ul"},"docker_predict (dockerfile)"),(0,a.kt)("li",{parentName:"ul"},"docker_training (dockerfile)")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Tweak your project layout (GUI) to your needs!")))}d.isMDXComponent=!0}}]);