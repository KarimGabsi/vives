"use strict";(self.webpackChunkcourses=self.webpackChunkcourses||[]).push([[2423],{4137:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>p});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=l(n),p=r,k=u["".concat(c,".").concat(p)]||u[p]||m[p]||o;return n?a.createElement(k,s(s({ref:t},d),{},{components:n})):a.createElement(k,s({ref:t},d))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2045:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=n(7462),r=(n(7294),n(4137));const o={sidebar_position:2},s="Docker Swarm",i={unversionedId:"Chapter 3 - Docker Swarm & API/docker swarm",id:"Chapter 3 - Docker Swarm & API/docker swarm",title:"Docker Swarm",description:"Source: Official Documentation",source:"@site/docs-cloud-for-ai/Chapter 3 - Docker Swarm & API/1. docker swarm.md",sourceDirName:"Chapter 3 - Docker Swarm & API",slug:"/Chapter 3 - Docker Swarm & API/docker swarm",permalink:"/vives/docs-cloud-for-ai/Chapter 3 - Docker Swarm & API/docker swarm",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Docker Compose",permalink:"/vives/docs-cloud-for-ai/Chapter 2 - Docker Hub & Compose/docker compose"},next:{title:"Docker SDK for Python",permalink:"/vives/docs-cloud-for-ai/Chapter 3 - Docker Swarm & API/docker SDK for python"}},c={},l=[{value:"What is a swarm?",id:"what-is-a-swarm",level:2},{value:"Nodes",id:"nodes",level:2},{value:"Services and tasks",id:"services-and-tasks",level:2},{value:"Load balancing",id:"load-balancing",level:2},{value:"Excercise",id:"excercise",level:2},{value:"Deploying a swarm (CLI)",id:"deploying-a-swarm-cli",level:2}],d={toc:l};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"docker-swarm"},"Docker Swarm"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Source: ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/swarm/key-concepts/"},"Official Documentation"))),(0,r.kt)("h2",{id:"what-is-a-swarm"},"What is a swarm?"),(0,r.kt)("p",null,"The cluster management and orchestration features embedded in the Docker Engine are built using swarmkit.\nSwarmkit is a separate project which implements Docker\u2019s orchestration layer and is used directly within Docker."),(0,r.kt)("p",null,"A swarm consists of multiple Docker hosts which run in swarm mode and act as managers (to manage membership and delegation) and workers (which run swarm services).\nA given Docker host can be a manager, a worker, or perform both roles.\nWhen you create a service, you define its optimal state (number of replicas, network and storage resources available to it,\nports the service exposes to the outside world, and more).\nDocker works to maintain that desired state.\nFor instance, if a worker node becomes unavailable, Docker schedules that node\u2019s tasks on other nodes.\nA task is a running container which is part of a swarm service and managed by a swarm manager, as opposed to a standalone container."),(0,r.kt)("p",null,"One of the key advantages of swarm services over standalone containers is that you can modify a service\u2019s configuration,\nincluding the networks and volumes it is connected to, without the need to manually restart the service.\nDocker will update the configuration, stop the service tasks with the out of date configuration, and create new ones matching the desired configuration."),(0,r.kt)("p",null,"When Docker is running in swarm mode, you can still run standalone containers on any of the Docker hosts participating in the swarm, as well as swarm services.\nA key difference between standalone containers and swarm services is that only swarm managers can manage a swarm,\nwhile standalone containers can be started on any daemon. Docker daemons can participate in a swarm as managers, workers, or both."),(0,r.kt)("p",null,"In the same way that you can use Docker Compose to define and run containers, you can define and run Swarm service stacks."),(0,r.kt)("h2",{id:"nodes"},"Nodes"),(0,r.kt)("p",null,"A node is an instance of the Docker engine participating in the swarm.\nYou can also think of this as a Docker node.\nYou can run one or more nodes on a single physical computer or cloud server,\nbut production swarm deployments typically include Docker nodes distributed across multiple physical and cloud machines."),(0,r.kt)("p",null,"To deploy your application to a swarm, you submit a service definition to a manager node.\nThe manager node dispatches units of work called tasks to worker nodes."),(0,r.kt)("p",null,"Manager nodes also perform the orchestration and cluster management functions required to maintain the desired state of the swarm.\nManager nodes elect a single leader to conduct orchestration tasks."),(0,r.kt)("p",null,"Worker nodes receive and execute tasks dispatched from manager nodes.\nBy default, manager nodes also run services as worker nodes, but you can configure them to run manager tasks exclusively and be manager-only nodes.\nAn agent runs on each worker node and reports on the tasks assigned to it. The worker node notifies the manager node of the current state of its assigned tasks so that the manager can maintain the desired state of each worker."),(0,r.kt)("h2",{id:"services-and-tasks"},"Services and tasks"),(0,r.kt)("p",null,"A service is the definition of the tasks to execute on the manager or worker nodes.\nIt is the central structure of the swarm system and the primary root of user interaction with the swarm."),(0,r.kt)("p",null,"When you create a service, you specify which container image to use and which commands to execute inside running containers.\nIn the replicated services model, the swarm manager distributes a specific number of replica tasks among the nodes based upon the scale you set in the desired state."),(0,r.kt)("p",null,"For global services, the swarm runs one task for the service on every available node in the cluster.\nA task carries a Docker container and the commands to run inside the container.\nIt is the atomic scheduling unit of swarm. Manager nodes assign tasks to worker nodes according to the number of replicas set in the service scale.\nOnce a task is assigned to a node, it cannot move to another node. It can only run on the assigned node or fail."),(0,r.kt)("h2",{id:"load-balancing"},"Load balancing"),(0,r.kt)("p",null,"The swarm manager uses ingress load balancing to expose the services you want to make available externally to the swarm.\nThe swarm manager can automatically assign the service a PublishedPort or you can configure a PublishedPort for the service.\nYou can specify any unused port. If you do not specify a port, the swarm manager assigns the service a port in the 30000-32767 range."),(0,r.kt)("p",null,"External components, such as cloud load balancers, can access the service on the PublishedPort of any node in the cluster whether or not the node is currently running the task for the service.\nAll nodes in the swarm route ingress connections to a running task instance."),(0,r.kt)("p",null,"Swarm mode has an internal DNS component that automatically assigns each service in the swarm a DNS entry.\nThe swarm manager uses internal load balancing to distribute requests among services within the cluster based upon the DNS name of the service."),(0,r.kt)("h2",{id:"excercise"},"Excercise"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create a file called ",(0,r.kt)("strong",{parentName:"li"},"docker-stack.yml"))),(0,r.kt)("p",null,"This file will dictate a swarm that consists of:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"3 types containers:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"a service called viewcounter which has two replicas"),(0,r.kt)("li",{parentName:"ul"},"a service for a database (we do not currently use this though)"),(0,r.kt)("li",{parentName:"ul"},"a service called worker which can only have one replica")))),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Pay attention to the ports, volume, ",(0,r.kt)("strong",{parentName:"p"},"roles")," and ",(0,r.kt)("strong",{parentName:"p"},"networks"),"!")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="docker-stack.yml"',title:'"docker-stack.yml"'},'version: "3.7"\nservices:\n  viewcounter:\n    image: revelare/autobuildtest:latest\n    ports:\n      - 5001:5000\n      - 5002:5000\n    volumes:\n      - TestVolume:/app\n    networks:\n      - frontend\n    deploy:\n      replicas: 2\n      update_config:\n        parallelism: 2\n      restart_policy:\n        condition: on-failure\n  db:\n    image: postgres:9.4\n    environment:\n      POSTGRES_USER: "postgres"\n      POSTGRES_PASSWORD: "postgres"\n    volumes:\n      - db-data:/var/lib/postgresql/data\n    networks:\n      - backend\n    deploy:\n      placement:\n        constraints: [node.role == manager]\n  worker:\n    image: revelare/autobuildtest:latest\n    ports:\n      - mode: host\n        target: 5000\n        published: 5555\n    networks:\n      - backend\n    volumes:\n      - TestVolume:/app\n    deploy:\n      mode: replicated\n      replicas: 1\n      labels: [EXTRA WORKER]\n      restart_policy:\n        condition: on-failure\n        delay: 10s\n        max_attempts: 3\n        window: 120s\n      placement:\n        constraints: [node.role == manager]\n\nnetworks:\n  frontend:\n  backend:\n\nvolumes:\n  TestVolume:\n    external: false\n  db-data:\n    external: false\n')),(0,r.kt)("h2",{id:"deploying-a-swarm-cli"},"Deploying a swarm (CLI)"),(0,r.kt)("p",null,"These are the important commands:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Open the Terminal and go to your project")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"cd Docker API\n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Activate the swarm engine:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"docker swarm init\n")),(0,r.kt)("admonition",{type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"Once a swarm has been initizialed you'll become the manager. ",(0,r.kt)("br",null),"\nIf other computers want to join your swarm they will need the info the terminal has provided you: ",(0,r.kt)("br",null),(0,r.kt)("br",null),"\nExample: ",(0,r.kt)("br",null),"\ndocker swarm join --token SWMTKN-1-1ehzbqxp4nxgifv0bzlzhy2lh4moclr66iobpfenqa409hnjvl-botgz2yulqtrok44hu4wy86an 192.168.65.3:2377")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Leaving a swarm can be done by the following command:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"docker swarm leave\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"or if you already in a previous one:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"docker swarm leave --force\n")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Deploy your swarm compose file:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"docker stack deploy --compose-file docker-stack.yml\n")),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},"To start your swarm project:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"docker stack services swarmexcercise\n")),(0,r.kt)("ol",{start:5},(0,r.kt)("li",{parentName:"ol"},"To show your services:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"docker service ls\n")),(0,r.kt)("ol",{start:6},(0,r.kt)("li",{parentName:"ol"},"To remove your swarm project:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"docker stack rm swarmexcercise\n")))}m.isMDXComponent=!0}}]);