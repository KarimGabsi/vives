"use strict";(self.webpackChunkcourses=self.webpackChunkcourses||[]).push([[9118],{4137:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>g});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=s(t),g=a,d=c["".concat(l,".").concat(g)]||c[g]||m[g]||o;return t?r.createElement(d,p(p({ref:n},u),{},{components:t})):r.createElement(d,p({ref:n},u))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,p=new Array(o);p[0]=c;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,p[1]=i;for(var s=2;s<o;s++)p[s]=t[s];return r.createElement.apply(null,p)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},8049:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>p,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var r=t(7462),a=(t(7294),t(4137));const o={sidebar_position:3},p="Container Measurements [VM]",i={unversionedId:"Chapter 4 - Epsagon/container measurements",id:"Chapter 4 - Epsagon/container measurements",title:"Container Measurements [VM]",description:"Example",source:"@site/docs-cloud-for-ai/Chapter 4 - Epsagon/3. container measurements.md",sourceDirName:"Chapter 4 - Epsagon",slug:"/Chapter 4 - Epsagon/container measurements",permalink:"/vives/docs-cloud-for-ai/Chapter 4 - Epsagon/container measurements",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Epsagon SDK for python",permalink:"/vives/docs-cloud-for-ai/Chapter 4 - Epsagon/epsagon SDK for python"},next:{title:"Docker Measurements [HOST]",permalink:"/vives/docs-cloud-for-ai/Chapter 4 - Epsagon/docker measurements"}},l={},s=[{value:"Example",id:"example",level:2},{value:"Flask App",id:"flask-app",level:3},{value:"Background worker",id:"background-worker",level:3},{value:"requirements_util.txt",id:"requirements_utiltxt",level:3},{value:"Dockerfile",id:"dockerfile",level:3},{value:"Docker-Compose",id:"docker-compose",level:3}],u={toc:s};function m(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"container-measurements-vm"},"Container Measurements ","[VM]"),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("h3",{id:"flask-app"},"Flask App"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="main_util.py"',title:'"main_util.py"'},"# -*- coding: utf-8 -*-\nimport subprocess\nimport sys\n\nimport epsagon\nimport psutil\nfrom flask import Flask\n\nepsagon.init(\n    token='epsagon-token',\n    app_name='app-name-stage',\n    metadata_only=False,\n)\n\nflask_app = Flask(__name__)\ncounter = 0\n\n\n@epsagon.measure\n@flask_app.route(\"/\")\ndef index():\n    global counter\n    counter += 1\n    epsagon.label('counter', counter)\n    if counter % 2 == 0:\n        print('Epsagon trace URL:', epsagon.get_trace_url())\n        epsagon.error(Exception(\"Double Trouble!\"))\n\n    mem_available = psutil.virtual_memory().available >> 20\n    return f\"Counter: {counter} [MEM: {mem_available} MB]\"\n\n\n@epsagon.measure\ndef epsagon_app():\n    flask_app.run(host=\"0.0.0.0\", port=5000, debug=False)\n\n\n@epsagon.python_wrapper\ndef main():\n    proc = None\n    try:\n        # proc = subprocess.Popen('python mem_measure.py')\n\n        proc = subprocess.Popen(['python', 'util_measure.py'], shell=False, stdout=subprocess.PIPE,\n                                stderr=subprocess.STDOUT)\n        print(\"Hello world!\", flush=True)\n        epsagon_app()\n    except Exception as e:\n        epsagon.error(e)\n        print(e)\n    finally:\n        if proc is not None:\n            proc.kill()\n        sys.exit()\n\n\nif __name__ == \"__main__\":\n    main()\n\n")),(0,a.kt)("h3",{id:"background-worker"},"Background worker"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py",metastring:"title=util_measure.py",title:"util_measure.py"},'import time\n\nimport epsagon\nimport psutil\nimport GPUtil\n\nepsagon.init(\n    token=\'epsagon-token\',\n    app_name=\'app-name-stage\',\n    metadata_only=False,\n)\n\n@epsagon.python_wrapper\ndef main():\n    while True:\n        cpu_usage = psutil.cpu_percent(interval=None)\n        epsagon.label("cpu_usage", cpu_usage)\n\n        memory_mb = psutil.virtual_memory().available >> 20 # in MB\n        memory_gb = psutil.virtual_memory().available >> 30 # in GB\n\n        epsagon.label("memory_mb", memory_mb) # trace\n        epsagon.label("memory_gb", memory_gb) # trace\n\n        gpus = []\n        for gpu in GPUtil.getGPUs():\n            gpu_info = f"{gpu.name} [{gpu.uuid}]"\n            gpu_load = gpu.load\n            gpus.append(f"{gpu_info}:{gpu_load} %")\n            epsagon.label(gpu_info, gpu_load) # trace\n\n        print(f"[cpu usage: {cpu_usage} %] [memory: {memory_gb} GB] {gpus}")\n        print(\'Epsagon trace URL:\', epsagon.get_trace_url())\n        # limit amount of traces.\n        time.sleep(5)\n\nif __name__ == \'__main__\':\n    main()\n')),(0,a.kt)("h3",{id:"requirements_utiltxt"},"requirements_util.txt"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="requirements_util.txt"',title:'"requirements_util.txt"'},"pip==22.2.2\nfuture==0.18.2\nMarkupSafe==2.1.1\nWerkzeug==2.2.2\nJinja2==3.1.2\nclick==8.1.3\nitsdangerous==2.1.2\nepsagon==1.81.0\nrequests==2.28.1\nFlask==2.2.2\npsutil==5.9.2\n# pywin32==304\nwrapt==1.14.1\nurllib3==1.26.12\nsix==1.16.0\ntzlocal==4.2\npython-dateutil==2.8.2\nsetuptools==63.2.0\n# docker==6.0.0\nGPUtil==1.4.0\n")),(0,a.kt)("h3",{id:"dockerfile"},"Dockerfile"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Dockerfile_util"',title:'"Dockerfile_util"'},"FROM python:alpine\n\nCOPY . /app\nWORKDIR /app\n\nRUN pip install --upgrade pip\nRUN apk update && apk add python3-dev gcc libc-dev\nRUN apk add build-base linux-headers\n\nRUN pip install -r requirements_util.txt\n\nEXPOSE 5000\n\nCMD python ./main_util.py\n")),(0,a.kt)("h3",{id:"docker-compose"},"Docker-Compose"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="docker-compose.yml"',title:'"docker-compose.yml"'},'version: "3.9"\nservices:\n  util:\n    container_name: epsagon_util\n    build:\n      dockerfile: Dockerfile_util\n    pull_policy: build\n    image: epsagon_util_image:latest\n    ports:\n      - 5000:5000\n    volumes:\n      - EpsagonUtilVolume:/app\nvolumes:\n  EpsagonUtilVolume:\n    external: false\n    name: EpsagonUtilVolume\n\n')))}m.isMDXComponent=!0}}]);