"use strict";(self.webpackChunkcourses=self.webpackChunkcourses||[]).push([[5701],{4137:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>d});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),f=l(t),d=o,u=f["".concat(s,".").concat(d)]||f[d]||m[d]||a;return t?r.createElement(u,i(i({ref:n},p),{},{components:t})):r.createElement(u,i({ref:n},p))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=f;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var l=2;l<a;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},1716:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var r=t(7462),o=(t(7294),t(4137));const a={sidebar_position:2},i="Docker SDK for Python",c={unversionedId:"Chapter 3 - Docker Swarm & API/docker SDK for python",id:"Chapter 3 - Docker Swarm & API/docker SDK for python",title:"Docker SDK for Python",description:"A Python library for the Docker Engine API.",source:"@site/docs-cloud-for-ai/Chapter 3 - Docker Swarm & API/2. docker SDK for python.md",sourceDirName:"Chapter 3 - Docker Swarm & API",slug:"/Chapter 3 - Docker Swarm & API/docker SDK for python",permalink:"/vives/docs-cloud-for-ai/Chapter 3 - Docker Swarm & API/docker SDK for python",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Docker Swarm",permalink:"/vives/docs-cloud-for-ai/Chapter 3 - Docker Swarm & API/docker swarm"},next:{title:"What is Epsagon?",permalink:"/vives/docs-cloud-for-ai/Chapter 4 - Epsagon/setup"}},s={},l=[{value:"Install",id:"install",level:2},{value:"Example",id:"example",level:2}],p={toc:l};function m(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"docker-sdk-for-python"},"Docker SDK for Python"),(0,o.kt)("p",null,"A Python library for the Docker Engine API.\nIt lets you do anything the docker command does, but from within Python apps \u2013 run containers, manage containers, manage Swarms, etc."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Source: ",(0,o.kt)("br",null),"\n",(0,o.kt)("a",{parentName:"p",href:"https://docker-py.readthedocs.io/en/stable/"},"Docker SDK For Python")," ",(0,o.kt)("br",null),"\n",(0,o.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/api/"},"Docker Engine API"))),(0,o.kt)("h2",{id:"install"},"Install"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"pip install docker\n")),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="DockerContainer.py"',title:'"DockerContainer.py"'},'from docker import DockerClient\nfrom docker.api import container\nclass DockerContainer:\n    def __init__(self, client: DockerClient, image: str, ports=None, name: str = None):\n        self.client = client\n        if ports is None:\n            ports = {}\n        if name is not None:\n            for con in self.client.containers.list(all=True):\n                if name == con.name:\n                    name = None\n\n        self.name = name\n        self.image = image\n        self.ports = ports\n        self.instance: container = None\n\n    def create_container(self):\n        self.instance = self.client.containers.create(image=self.image,\n                                                      name=self.name,\n                                                      ports=self.ports)\n\n    def start(self):\n        if self.instance is None:\n            self.create_container()\n        self.instance.start()\n\n    def stop(self):\n        if self.instance is not None:\n            self.instance.stop()\n        else:\n            raise "No container to stop"\n\n    def remove(self):\n        if self.instance is not None:\n            self.instance.stop()\n            self.instance.remove()\n        else:\n            raise "No container to remove"\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="main_simplecontainers.py"',title:'"main_simplecontainers.py"'},'import docker\nfrom DockerContainer import *\nimport time\n\ndef show_containers(client: DockerClient):\n    containers = client.containers.list(all=True)\n    for x in containers:\n        print(f"{x}: {x.name} [{x.status}]")\n\nif __name__ == \'__main__\':\n    # docker environment\n    client: DockerClient = docker.from_env()\n    print("OVERVIEW")\n    show_containers(client)\n\n    dc1 = DockerContainer(client=client,\n                          image="revelare/gabsikarim_autobuild:latest",\n                          name="PythonContainer",\n                          ports={5000:5000})\n\n    dc1.start()\n    print("DC 1 Started")\n    show_containers(client)\n\n    time.sleep(5)\n    dc1.stop()\n    print("DC 1 Stopped")\n    show_containers(client)\n\n    time.sleep(2)\n    dc1.remove()\n    print("DC 1 Removed")\n    show_containers(client)\n\n    client.close()\n    print("CLIENT CLOSED")\n\n# con1 = client.containers.get(containers[0].id)\n# for line in con1.logs(stream=True):\n#     print(line.strip())\n\n')))}m.isMDXComponent=!0}}]);